{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e4de17f6-042f-4aeb-a7fc-3ffbc3c5a158"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c9429ec5-5023-4c5e-a2bf-8f2f3608ae0f",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "176705da-bda6-4e63-8118-78a079284647",
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Invalid document type"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        540,
        1440
      ],
      "id": "819c33d1-51dc-4895-97f6-a51db86e447d",
      "name": "Switch"
    },
    {
      "parameters": {
        "errorMessage": "Invalid document type"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        820,
        2160
      ],
      "id": "dc7f3050-0c0c-4604-bc5b-c720057ff889",
      "name": "Stop and Error",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1400,
        1280
      ],
      "id": "8773111c-e6d3-4420-a25c-03a4875daccc",
      "name": "Get Signed URL",
      "credentials": {
        "httpHeaderAuth": {
          "id": "cmMMrYBcywdGNdvW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        1280
      ],
      "id": "ef7394ef-9501-4bc5-8df2-d476684ab0d2",
      "name": "Perform OCR",
      "credentials": {
        "httpHeaderAuth": {
          "id": "cmMMrYBcywdGNdvW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1940,
        1440
      ],
      "id": "db0162c9-0312-44a0-b339-bae376e7de83",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "xW3r3zB76VNFthFQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "extracted_information",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Company Name",
              "fieldValue": "={{ $json.output['Company Name'] }}"
            },
            {
              "fieldId": "=Invoice Number",
              "fieldValue": "={{ $json.output['Invoice Number'] }}"
            },
            {
              "fieldId": "=Invoice Date",
              "fieldValue": "={{ new Date($json.output['Invoice Date'].split('.').reverse().join('-')).toISOString().split('T')[0] }}"
            },
            {
              "fieldId": "GSTIN",
              "fieldValue": "={{ $json.output.GSTIN }}"
            },
            {
              "fieldId": "PAN",
              "fieldValue": "={{ $json.output.PAN }}"
            },
            {
              "fieldId": "=HSN/SAC",
              "fieldValue": "={{ $json.output['HSN/SAC '] }}"
            },
            {
              "fieldId": "=Taxes",
              "fieldValue": "={{ $json.output.Taxes }}"
            },
            {
              "fieldId": "=Total Amount",
              "fieldValue": "={{ $json.output['Total Amount'] }}"
            },
            {
              "fieldId": "=Payment Terms",
              "fieldValue": "={{ $json.output['Payment Terms'] }}"
            },
            {
              "fieldId": "=Currency",
              "fieldValue": "={{ $json.output.Currency }}"
            },
            {
              "fieldId": "Customer Name",
              "fieldValue": "={{ $json.output['Customer Name'] }}"
            },
            {
              "fieldId": "Billing Address",
              "fieldValue": "={{ $json.output['Billing Address'] }}"
            },
            {
              "fieldId": "Shipping Address",
              "fieldValue": "={{ $json.output['Shipping Address'] }}"
            },
            {
              "fieldId": "Document Type",
              "fieldValue": "={{ $json.output['Document Type'] }}"
            },
            {
              "fieldId": "Company Address",
              "fieldValue": "={{ $json.output['Company Address'] }}"
            },
            {
              "fieldId": "file_id",
              "fieldValue": "={{ $('Google Drive Trigger').item.json.id }}"
            },
            {
              "fieldId": "Received_From",
              "fieldValue": "={{ $('Google Drive1').item.json.lastModifyingUser.emailAddress }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2380,
        1280
      ],
      "id": "174a71f4-f59c-4f68-bed8-27c1e5459652",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json }}",
        "options": {
          "systemMessage": "# Overview  \nYou are an AI agent responsible for validating invoice data using rule-based checks, updating invoice metadata, and triggering relevant Supabase and Gmail tool actions. Your task includes calling tools, making decisions based on logic, and outputting the final `flag` and `visited` status for each invoice.\n\n## Context  \n- Incoming invoices arrive from the `getting_output` node.  \n- The invoice data is stored in `extracted_information` (from the `for_validation` database).  \n- `file_id` is the primary key used to uniquely identify each invoice.  \n- You must not validate an invoice against itself.  \n- You must update the invoice’s `flag` field, and optionally insert it into the `invoice_status` table if it passes validation.  \n- If the invoice fails validation and has a `received_from` email, send a rejection notice via Gmail.  \n\n## Instructions  \n\n### Step 1: Fetch Current Invoice  \nReceive invoice data from the `getting_output` node. Store key fields:  \n- `file_id`, `created_at`, `invoice_number`, `company_name`, `gstin`, `total_amount`, `received_from`, and other invoice fields.\n\n### Step 2: Call Tool — Supabase Select  \nFetch all historical unvisited invoices, excluding the current invoice:\n\n```json\n{\n  \"action\": \"select\",\n  \"table\": \"extracted_information\",\n  \"conditions\": {\n    \"visited\": false,\n    \"file_id\": { \"neq\": \"{{$json[\"file_id\"]}}\" }\n  }\n}\nStore this result as historical_invoices.\n\n###Step 3: Perform Validation Logic\nRun the following checks using the current_invoice vs. historical_invoices:\n\nRequired Fields Check: Ensure all of the following fields are present:\nCompany_Name, Company_Address, Invoice_Number, GSTIN, Invoice_Date, Taxes, Customer_Name, Billing_Address or Shipping_Address, Total_Amount.\n\nFrequency Check: If the same company_name appears in multiple entries within 24 hours, mark as suspicious.\nDuplicate Invoice Number: Reject if the same invoice_number exists in historical_invoices.\nSimilarity Check: If any invoice has a similar invoice_number (fuzzy match) and all fields match, mark as suspicious.\nCurrency Validity: Check that Currency field has a valid currency code (e.g., INR, USD, EUR or Currency Symbols like $, £).\nTax Accuracy: Check that Taxes field includes valid taxes or tax amount also tax percentages (5%, 12%, 18%) may exist but not necessary.\n\n###Step 4: Set Flag\nIf all checks pass, set flag = true\n\nElse, set flag = false\n\n###Step 5: Call Tool — Supabase Update\nUpdate the current invoice’s record in extracted_information:\n\n```json\n{\n  \"action\": \"update\",\n  \"table\": \"extracted_information\",\n  \"conditions\": {\n    \"file_id\": \"{{$json[\"file_id\"]}}\"\n  },\n  \"data\": {\n    \"flag\": true/false\n  }\n}```\n\n###Step 6: If Flag = False and Email Exists\nCall Gmail tool to notify the sender:\n\n```json\n{\n  \"action\": \"sendEmail\",\n  \"to\": \"{{$json[\"received_from\"]}}\",\n  \"subject\": \"Invoice Validation Failed\",\n  \"body\": \"Your invoice ({{$json[\"invoice_number\"]}}) failed validation due to: [list of failed checks]. Please revise and resubmit.\"\n}```\n\n###Step 7: If Flag = True\nInsert invoice into the invoice_status table:\n\n```json\n{\n  \"action\": \"insert\",\n  \"table\": \"invoice_status\",\n  \"data\": {\n    \"Company_Name\": \"{{$json[\"Company_Name\"]}}\",\n    \"Company_Address\": \"{{$json[\"Company_Address\"]}}\",\n    \"PAN\": \"{{$json[\"PAN\"]}}\",\n    \"GSTIN\": \"{{$json[\"GSTIN\"]}}\",\n    \"HSN/SAC\": \"{{$json[\"HSN/SAC\"]}}\",\n    \"Taxes\": \"{{$json[\"Taxes\"]}}\",\n    \"Currency\": \"{{$json[\"Currency\"]}}\",\n    \"Received_From\": \"{{$json[\"Received_From\"]}}\",\n    \"created_at\": \"{{$json[\"created_at\"]}}\",\n    \"Invoice_Number\": \"{{$json[\"Invoice_Number\"]}}\",\n    \"Invoice_Date\": \"{{$json[\"Invoice_Date\"]}}\",\n    \"Total_Amount\": \"{{$json[\"Total_Amount\"]}}\",\n    \"Payment_Terms\": \"{{$json[\"Payment_Terms\"]}}\",\n    \"Customer_Name\": \"{{$json[\"Customer_Name\"]}}\",\n    \"Billing_Address\": \"{{$json[\"Billing_Address\"]}}\",\n    \"Shipping_Address\": \"{{$json[\"Shipping_Address\"]}}\"\n  }\n}```\n\nStep 8: Output\nReturn the final status:\n\n```json\n{\n  \"file_id\": \"{{$json[\"file_id\"]}}\",\n  \"flag\": true/false\n}```\n\n##Tools\nSupabase (Select, Update, Insert)\n\nGmail (Send Email)\n\nExamples\nInput: Invoice from getting_output with file_id: 12345 and invoice_number: INV-001\n\nOutput:\n\n```json\n{\n  \"file_id\": \"12345\",\n  \"flag\": false,\n  \"visited\": true\n}```\n\n##SOP (Standard Operating Procedure)\n-Fetch current invoice data.\n-Select all other unvisited invoices using Supabase.\n-Apply rule-based validations.\n-Set the flag accordingly.\n-Update the invoice status in Supabase.\n-If failed and email exists, send rejection email.\n-If passed, insert into invoice_status.\n-Return final JSON output with file ID, flag, and visited.\n\n##Final Notes\n-Always exclude the current invoice (file_id) from validation checks.\n-Do not send a rejection email if the invoice is valid.\n-Only insert into invoice_status if flag = true.\n-Only update the flag field; do not modify the visited field.\n-Do not update invoice_status or call invoice_status_db if an entry fails validation.\n- The mail should contain all the reason why the invoice ws rejected\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2860,
        1280
      ],
      "id": "80f034b2-aa49-44f1-bc76-ae046f0ed403",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2660,
        1620
      ],
      "id": "a3a66c54-54c9-4759-aecc-5683d5848f30",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "xW3r3zB76VNFthFQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('send_to') }}",
        "subject": "={{ $fromAI('subject') }}",
        "emailType": "text",
        "message": "={{ $fromAI('message') }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        2820,
        1640
      ],
      "id": "3753cfea-4505-4ae3-9697-7138ae7d4e47",
      "name": "Gmail",
      "webhookId": "e5c60beb-b154-4ec5-8bd2-90de38345107",
      "credentials": {
        "gmailOAuth2": {
          "id": "3MglLVh2yMJSWduQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "extracted_information",
        "returnAll": true,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        3280,
        1620
      ],
      "id": "ddbf7629-9521-491a-a436-5606394bc81a",
      "name": "for_validation",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "invoice_status",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Company_Name",
              "fieldValue": "={{ $('getting_output').item.json['Company Name'] }}"
            },
            {
              "fieldId": "Invoice_Number",
              "fieldValue": "={{ $('getting_output').item.json['Invoice Number'] }}"
            },
            {
              "fieldId": "Invoice_Date",
              "fieldValue": "={{ $('getting_output').item.json['Invoice Date'] }}"
            },
            {
              "fieldId": "GSTIN",
              "fieldValue": "={{ $('getting_output').item.json.GSTIN }}"
            },
            {
              "fieldId": "PAN",
              "fieldValue": "={{ $('getting_output').item.json.PAN }}"
            },
            {
              "fieldId": "HSN/SAC",
              "fieldValue": "={{ $('getting_output').item.json['HSN/SAC'] }}"
            },
            {
              "fieldId": "Taxes",
              "fieldValue": "={{ $('getting_output').item.json.Taxes }}"
            },
            {
              "fieldId": "Total_Amount",
              "fieldValue": "={{ $('getting_output').item.json['Total Amount'] }}"
            },
            {
              "fieldId": "Payment_Terms",
              "fieldValue": "={{ $('getting_output').item.json['Payment Terms'] }}"
            },
            {
              "fieldId": "Currency",
              "fieldValue": "={{ $('getting_output').item.json.Currency }}"
            },
            {
              "fieldId": "Customer_Name",
              "fieldValue": "={{ $('getting_output').item.json['Customer Name'] }}"
            },
            {
              "fieldId": "Billing_Address",
              "fieldValue": "={{ $('getting_output').item.json['Billing Address'] }}"
            },
            {
              "fieldId": "Shipping_Address",
              "fieldValue": "={{ $('getting_output').item.json['Shipping Address'] }}"
            },
            {
              "fieldId": "Company_Address",
              "fieldValue": "={{ $('getting_output').item.json['Company Address'] }}"
            },
            {
              "fieldId": "Received_From",
              "fieldValue": "={{ $('getting_output').item.json.Received_From }}"
            },
            {
              "fieldId": "file_id",
              "fieldValue": "={{ $('getting_output').item.json.file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        3140,
        1640
      ],
      "id": "6472c799-f3e3-456d-938b-08c82fd2a586",
      "name": "Invoice_status_db",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "extracted_information",
          "mode": "list",
          "cachedResultName": "extracted_information"
        },
        "limit": 1,
        "sort": {
          "values": [
            {
              "column": "created_at",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2700,
        1280
      ],
      "id": "f7de6818-c602-4668-b952-53e7b90260df",
      "name": "getting_output",
      "credentials": {
        "postgres": {
          "id": "1c56XfcSUsy5D5Wq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "extracted_information",
        "filters": {
          "conditions": [
            {
              "keyName": "file_id",
              "condition": "eq",
              "keyValue": "={{ $('getting_output').item.json.file_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Flag",
              "fieldValue": "={{$fromAI('flag')}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2980,
        1640
      ],
      "id": "74b1bd61-56ef-4869-ba67-61d34e0df982",
      "name": "update exracted_information table1",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "Update extracted_information set visited = TRUE where file_id = '{{ $('getting_output').item.json.file_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3360,
        1280
      ],
      "id": "801dcda9-9abd-47bc-9f4b-f6b15f7e602e",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "1c56XfcSUsy5D5Wq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        1280
      ],
      "id": "edfb5082-2174-4480-8181-e856ccb03dd3",
      "name": "Upload pdf to Mistral",
      "credentials": {
        "httpHeaderAuth": {
          "id": "cmMMrYBcywdGNdvW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        1700
      ],
      "id": "07ca8b25-b9e6-4f2e-96e6-454fe92b4560",
      "name": "Get Signed URL1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "cmMMrYBcywdGNdvW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        860,
        1700
      ],
      "id": "ad2ab95c-4e74-4dc8-9ca7-99d15aa54d0c",
      "name": "Upload image to Mistral",
      "credentials": {
        "httpHeaderAuth": {
          "id": "cmMMrYBcywdGNdvW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer FGEBJ67msT1iCzY0P5fI8SUhKy5okfhw"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"image_url\",\n    \"image_url\": \"{{ $json.url }}\"\n  }\n} ",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "ocr_output.json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        1700
      ],
      "id": "b259009f-1cbb-4407-9582-9c04fda05507",
      "name": "Perform OCR1"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "binaryPropertyName": "ocr_output.json",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1560,
        1700
      ],
      "id": "5c336a70-9325-4f39-a4ea-fae9e221eb11",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2060,
        2320
      ],
      "id": "474a536e-8fa9-4718-8449-751062a40aa0",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "xW3r3zB76VNFthFQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data.pages[0].markdown }}",
        "options": {
          "systemMessage": "# Overview  \nYou are an AI agent responsible for extracting structured invoice information from unstructured text (typically OCR output) and returning clean, valid JSON. Your response must be directly machine-readable, without formatting artifacts like Markdown syntax. The result will be stored in a Supabase database, so it must be parseable without further cleaning.\n\n## Context  \n- You will receive OCR-extracted invoice text as input.  \n- This text may come from a scanned PDF or image and contains details like invoice number, company name, date, taxes, amount, etc.  \n- The system will parse your output as JSON.  \n- Your output must be well-formatted JSON **only** — no triple backticks, no markdown, no comments.  \n- Fields not found should be returned as `null`.  \n- The output must always include all expected fields.\n\n## Instructions  \n\n1. Extract the following fields from the given text:\n   - Company Name  \n   - Company Address  \n   - Invoice Number  \n   - Document Type (e.g., `pdf`, `image/png`)  \n   - GSTIN  \n   - PAN  \n   - Invoice Date  \n   - HSN/SAC  \n   - Taxes  \n   - Customer Name  \n   - Billing Address  \n   - Total Amount  \n   - Payment Terms  \n   - Currency  \n   - Shipping Address  \n\n2. If a field is missing in the text, set its value to `null`.\n\n3. Return the extracted data as **pure JSON** — do not wrap the response in triple backticks (```) or markdown syntax.\n\n4. Ensure the response starts and ends with `{}` and uses double quotes around all keys and string values.\n\n## Tools  \n- Natural language understanding  \n- Pattern matching or fuzzy matching for identifying fields  \n- No external APIs are required  \n\n## Example  \n\n### Input:\nCapgemini invites you...\nYour Competition is scheduled for <2025 May, 20, 04:00 PM IST>\nDear Candidate, ...\nTest Link: https://...\nCurrency: INR\nCustomer Name: Candidate\n\n### Output:\n{\n  \"Company Name\": \"Capgemini\",\n  \"Company Address\": null,\n  \"Invoice Number\": null,\n  \"Document Type\": \"image/png\",\n  \"GSTIN\": null,\n  \"PAN\": null,\n  \"Invoice Date\": null,\n  \"HSN/SAC\": null,\n  \"Taxes\": null,\n  \"Customer Name\": \"Candidate\",\n  \"Billing Address\": null,\n  \"Total Amount\": null,\n  \"Payment Terms\": null,\n  \"Currency\": \"INR\",\n  \"Shipping Address\": null\n}\n##SOP (Standard Operating Procedure)\n-Read the OCR input text.\n-Identify all fields using best-effort semantic and pattern-based extraction.\n-Populate the structured JSON object.\n-Return JSON with no markdown or extra formatting.\n\n##Final Notes\n-Never return markdown formatting like ```json\n-All fields must be present in the output JSON, even if set to null.\n-The JSON must be parseable by downstream systems without modification.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1700,
        2040
      ],
      "id": "c2611914-17b7-4b4a-b1fd-1912b5f6146b",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1740,
        2320
      ],
      "id": "254353f2-112d-4580-8214-80d03f3daf7b",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "xW3r3zB76VNFthFQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "extracted_information",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Company Name",
              "fieldValue": "={{ $json.output['Company Name'] }}"
            },
            {
              "fieldId": "=Invoice Number",
              "fieldValue": "={{ $json.output['Invoice Number'] }}"
            },
            {
              "fieldId": "=Invoice Date",
              "fieldValue": "={{ new Date($json.output['Invoice Date'].split('.').reverse().join('-')).toISOString().split('T')[0] }}"
            },
            {
              "fieldId": "GSTIN",
              "fieldValue": "={{ $json.output.GSTIN }}"
            },
            {
              "fieldId": "PAN",
              "fieldValue": "={{ $json.output.PAN }}"
            },
            {
              "fieldId": "=HSN/SAC",
              "fieldValue": "={{ $json.output['HSN/SAC '] }}"
            },
            {
              "fieldId": "=Taxes",
              "fieldValue": "={{ $json.output.Taxes }}"
            },
            {
              "fieldId": "=Total Amount",
              "fieldValue": "={{ $json.output['Total Amount'] }}"
            },
            {
              "fieldId": "=Payment Terms",
              "fieldValue": "={{ $json.output['Payment Terms'] }}"
            },
            {
              "fieldId": "=Currency",
              "fieldValue": "={{ $json.output.Currency }}"
            },
            {
              "fieldId": "Customer Name",
              "fieldValue": "={{ $json.output['Customer Name'] }}"
            },
            {
              "fieldId": "Billing Address",
              "fieldValue": "={{ $json.output['Billing Address'] }}"
            },
            {
              "fieldId": "Shipping Address",
              "fieldValue": "={{ $json.output['Shipping Address'] }}"
            },
            {
              "fieldId": "Document Type",
              "fieldValue": "={{ $json.output['Document Type'] }}"
            },
            {
              "fieldId": "Company Address",
              "fieldValue": "={{ $json.output['Company Address'] }}"
            },
            {
              "fieldId": "file_id",
              "fieldValue": "={{ $('Google Drive Trigger').item.json.id }}"
            },
            {
              "fieldId": "Received_From",
              "fieldValue": "={{ $('Google Drive1').item.json.lastModifyingUser.emailAddress }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2360,
        2040
      ],
      "id": "43eede4b-bb9d-45dc-b860-ea55c88afc0f",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json }}",
        "options": {
          "systemMessage": "# Overview  \nYou are an AI agent responsible for validating invoice data using rule-based checks, updating invoice metadata, and triggering relevant Supabase and Gmail tool actions. Your task includes calling tools, making decisions based on logic, and outputting the final `flag` and `visited` status for each invoice.\n\n## Context  \n- Incoming invoices arrive from the `getting_output` node.  \n- The invoice data is stored in `extracted_information` (from the `for_validation` database).  \n- `file_id` is the primary key used to uniquely identify each invoice.  \n- You must not validate an invoice against itself.  \n- You must update the invoice’s `flag` field, and optionally insert it into the `invoice_status` table if it passes validation.  \n- If the invoice fails validation and has a `received_from` email, send a rejection notice via Gmail.  \n\n## Instructions  \n\n### Step 1: Fetch Current Invoice  \nReceive invoice data from the `getting_output` node. Store key fields:  \n- `file_id`, `created_at`, `invoice_number`, `company_name`, `gstin`, `total_amount`, `received_from`, and other invoice fields.\n\n### Step 2: Call Tool — Supabase Select  \nFetch all historical unvisited invoices, excluding the current invoice:\n\n```json\n{\n  \"action\": \"select\",\n  \"table\": \"extracted_information\",\n  \"conditions\": {\n    \"visited\": false,\n    \"file_id\": { \"neq\": \"{{$json[\"file_id\"]}}\" }\n  }\n}\nStore this result as historical_invoices.\n\n###Step 3: Perform Validation Logic\nRun the following checks using the current_invoice vs. historical_invoices:\n\nRequired Fields Check: Ensure all of the following fields are present:\nCompany_Name, Company_Address, Invoice_Number, GSTIN, Invoice_Date, Taxes, Customer_Name, Billing_Address or Shipping_Address, Total_Amount.\n\nFrequency Check: If the same company_name appears in multiple entries within 24 hours, mark as suspicious.\nDuplicate Invoice Number: Reject if the same invoice_number exists in historical_invoices.\nSimilarity Check: If any invoice has a similar invoice_number (fuzzy match) and all fields match, mark as suspicious.\nCurrency Validity: Check that Currency field has a valid currency code (e.g., INR, USD, EUR or Currency Symbols like $, £).\nTax Accuracy: Check that Taxes field includes valid taxes or tax amount also tax percentages (5%, 12%, 18%) may exist but not necessary.\n\n###Step 4: Set Flag\nIf all checks pass, set flag = true\n\nElse, set flag = false\n\n###Step 5: Call Tool — Supabase Update\nUpdate the current invoice’s record in extracted_information:\n\n```json\n{\n  \"action\": \"update\",\n  \"table\": \"extracted_information\",\n  \"conditions\": {\n    \"file_id\": \"{{$json[\"file_id\"]}}\"\n  },\n  \"data\": {\n    \"flag\": true/false\n  }\n}```\n\n###Step 6: If Flag = False and Email Exists\nCall Gmail tool to notify the sender:\n\n```json\n{\n  \"action\": \"sendEmail\",\n  \"to\": \"{{$json[\"received_from\"]}}\",\n  \"subject\": \"Invoice Validation Failed\",\n  \"body\": \"Your invoice ({{$json[\"invoice_number\"]}}) failed validation due to: [list of failed checks]. Please revise and resubmit.\"\n}```\n\n###Step 7: If Flag = True\nInsert invoice into the invoice_status table:\n\n```json\n{\n  \"action\": \"insert\",\n  \"table\": \"invoice_status\",\n  \"data\": {\n    \"Company_Name\": \"{{$json[\"Company_Name\"]}}\",\n    \"Company_Address\": \"{{$json[\"Company_Address\"]}}\",\n    \"PAN\": \"{{$json[\"PAN\"]}}\",\n    \"GSTIN\": \"{{$json[\"GSTIN\"]}}\",\n    \"HSN/SAC\": \"{{$json[\"HSN/SAC\"]}}\",\n    \"Taxes\": \"{{$json[\"Taxes\"]}}\",\n    \"Currency\": \"{{$json[\"Currency\"]}}\",\n    \"Received_From\": \"{{$json[\"Received_From\"]}}\",\n    \"created_at\": \"{{$json[\"created_at\"]}}\",\n    \"Invoice_Number\": \"{{$json[\"Invoice_Number\"]}}\",\n    \"Invoice_Date\": \"{{$json[\"Invoice_Date\"]}}\",\n    \"Total_Amount\": \"{{$json[\"Total_Amount\"]}}\",\n    \"Payment_Terms\": \"{{$json[\"Payment_Terms\"]}}\",\n    \"Customer_Name\": \"{{$json[\"Customer_Name\"]}}\",\n    \"Billing_Address\": \"{{$json[\"Billing_Address\"]}}\",\n    \"Shipping_Address\": \"{{$json[\"Shipping_Address\"]}}\"\n  }\n}```\n\nStep 8: Output\nReturn the final status:\n\n```json\n{\n  \"file_id\": \"{{$json[\"file_id\"]}}\",\n  \"flag\": true/false\n}```\n\n##Tools\nSupabase (Select, Update, Insert)\n\nGmail (Send Email)\n\nExamples\nInput: Invoice from getting_output with file_id: 12345 and invoice_number: INV-001\n\nOutput:\n\n```json\n{\n  \"file_id\": \"12345\",\n  \"flag\": false,\n  \"visited\": true\n}```\n\n##SOP (Standard Operating Procedure)\n-Fetch current invoice data.\n-Select all other unvisited invoices using Supabase.\n-Apply rule-based validations.\n-Set the flag accordingly.\n-Update the invoice status in Supabase.\n-If failed and email exists, send rejection email.\n-If passed, insert into invoice_status.\n-Return final JSON output with file ID, flag, and visited.\n\n##Final Notes\n-Always exclude the current invoice (file_id) from validation checks.\n-Do not send a rejection email if the invoice is valid.\n-Only insert into invoice_status if flag = true.\n-Only update the flag field; do not modify the visited field.\n-Do not update invoice_status or call invoice_status_db if an entry fails validation.\n- The mail should contain all the reason why the invoice ws rejected\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2840,
        2040
      ],
      "id": "d7cc95ee-8720-4c5c-a9c7-8d8b70053aa0",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2640,
        2380
      ],
      "id": "f77ca823-fff8-4c85-92af-f5ff0b525a5d",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "xW3r3zB76VNFthFQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('send_to') }}",
        "subject": "={{ $fromAI('subject') }}",
        "emailType": "text",
        "message": "={{ $fromAI('message') }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        2840,
        2400
      ],
      "id": "3c91451e-72fd-4c6f-8b3a-40ca1d955370",
      "name": "Gmail1",
      "webhookId": "e5c60beb-b154-4ec5-8bd2-90de38345107",
      "credentials": {
        "gmailOAuth2": {
          "id": "3MglLVh2yMJSWduQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "extracted_information",
        "returnAll": true,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        3260,
        2380
      ],
      "id": "b8444eb1-6ac4-43d9-801d-dc9443ac6e90",
      "name": "for_validation1",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "invoice_status",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Company_Name",
              "fieldValue": "={{ $('getting_output1').item.json['Company Name'] }}"
            },
            {
              "fieldId": "Invoice_Number",
              "fieldValue": "={{ $('getting_output1').item.json['Invoice Number'] }}"
            },
            {
              "fieldId": "Invoice_Date",
              "fieldValue": "={{ $('getting_output1').item.json['Invoice Date'] }}"
            },
            {
              "fieldId": "GSTIN",
              "fieldValue": "={{ $('getting_output1').item.json.GSTIN }}"
            },
            {
              "fieldId": "PAN",
              "fieldValue": "={{ $('getting_output1').item.json.PAN }}"
            },
            {
              "fieldId": "HSN/SAC",
              "fieldValue": "={{ $('getting_output1').item.json['HSN/SAC'] }}"
            },
            {
              "fieldId": "Taxes",
              "fieldValue": "={{ $('getting_output1').item.json.Taxes }}"
            },
            {
              "fieldId": "Total_Amount",
              "fieldValue": "={{ $('getting_output1').item.json['Total Amount'] }}"
            },
            {
              "fieldId": "Payment_Terms",
              "fieldValue": "={{ $('getting_output1').item.json['Payment Terms'] }}"
            },
            {
              "fieldId": "Currency",
              "fieldValue": "={{ $('getting_output1').item.json.Currency }}"
            },
            {
              "fieldId": "Customer_Name",
              "fieldValue": "={{ $('getting_output1').item.json['Customer Name'] }}"
            },
            {
              "fieldId": "Billing_Address",
              "fieldValue": "={{ $('getting_output1').item.json['Billing Address'] }}"
            },
            {
              "fieldId": "Shipping_Address",
              "fieldValue": "={{ $('getting_output1').item.json['Shipping Address'] }}"
            },
            {
              "fieldId": "Company_Address",
              "fieldValue": "={{ $('getting_output1').item.json['Company Address'] }}"
            },
            {
              "fieldId": "Received_From",
              "fieldValue": "={{ $('getting_output1').item.json.Received_From }}"
            },
            {
              "fieldId": "file_id",
              "fieldValue": "={{ $('getting_output1').item.json.file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        3100,
        2380
      ],
      "id": "89b7f2e4-d38b-4f7f-b647-8fb9b39fa2ca",
      "name": "Invoice_status_db1",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE extracted_information ei\nSET \"Received_From\" = sm.mail_id\nFROM sender_mail sm\nWHERE ei.file_id = sm.file_id\n  AND ei.\"Received_From\" IS NULL;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2520,
        2040
      ],
      "id": "dda0a9c7-e569-4a8e-91d6-a4c836b5535d",
      "name": "updating mail1",
      "credentials": {
        "postgres": {
          "id": "1c56XfcSUsy5D5Wq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "extracted_information",
          "mode": "list",
          "cachedResultName": "extracted_information"
        },
        "limit": 1,
        "sort": {
          "values": [
            {
              "column": "created_at",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2680,
        2040
      ],
      "id": "536ed784-67c3-49e5-a15d-ff66616a7b3d",
      "name": "getting_output1",
      "credentials": {
        "postgres": {
          "id": "1c56XfcSUsy5D5Wq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "extracted_information",
        "filters": {
          "conditions": [
            {
              "keyName": "file_id",
              "condition": "eq",
              "keyValue": "={{ $('getting_output1').item.json.file_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Flag",
              "fieldValue": "={{$fromAI('flag')}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2960,
        2400
      ],
      "id": "984775a1-2e4d-4ff0-a996-baff25d956ce",
      "name": "update exracted_information table",
      "credentials": {
        "supabaseApi": {
          "id": "fnJDxfCmhP9V6RyV",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "Update extracted_information set visited = TRUE where file_id = '{{ $('getting_output').item.json.file_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3340,
        2040
      ],
      "id": "9d33cc48-9504-4a87-9892-79a0cc66a377",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "1c56XfcSUsy5D5Wq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE extracted_information ei\nSET \"Received_From\" = sm.mail_id\nFROM sender_mail sm\nWHERE ei.file_id = sm.file_id\n  AND ei.\"Received_From\" IS NULL;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2540,
        1280
      ],
      "id": "abbdbfa1-189e-4d80-bfbc-dcd2d8e99cea",
      "name": "updating received_from",
      "credentials": {
        "postgres": {
          "id": "1c56XfcSUsy5D5Wq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.output }}",
        "attributes": {
          "attributes": [
            {
              "name": "Company Name",
              "description": "Name of the company"
            },
            {
              "name": "Company Address",
              "description": "Address of the company"
            },
            {
              "name": "Invoice Number",
              "description": "The number of the invoice null or blank if doesnt exist"
            },
            {
              "name": "Document Type",
              "description": "={{ $('Google Drive1').item.json.mimeType }}"
            },
            {
              "name": "GSTIN",
              "description": "GST Identification Number null if doesnt exist"
            },
            {
              "name": "PAN",
              "description": "PAN: null if doesnt exist"
            },
            {
              "name": "Invoice Date",
              "type": "date",
              "description": "Invoice date null if doesnt exist"
            },
            {
              "name": "HSN/SAC ",
              "description": "HSN or SAC code null if doesnt exist"
            },
            {
              "name": "Taxes",
              "description": "Any applicable taxes written as {Tax name} - {Tax Price} with currency "
            },
            {
              "name": "Customer Name",
              "description": "Customer Name"
            },
            {
              "name": "Billing Address",
              "description": "Billing Address"
            },
            {
              "name": "Total Amount",
              "description": "Total Price (Incl.Tax) - "
            },
            {
              "name": "Payment Terms",
              "description": "Payment terms or type such as UPI, Cash/CoD, Debit Card, Credit Card"
            },
            {
              "name": "Currency",
              "description": "type of currency used INR here"
            },
            {
              "name": "Shipping Address",
              "description": "Shipping Address Billing and Shipping address can be same if the are not given separately"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm. Only extract relevant information from the text. If you do not know the value of an attribute asked to extract, you may omit the attribute's value. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        2000,
        2040
      ],
      "id": "17a30ed1-142f-4918-b989-4f132a2c1eb5",
      "name": "Information Extractor (for image)"
    },
    {
      "parameters": {
        "text": "={{ $json.pages[0].markdown }}\n",
        "attributes": {
          "attributes": [
            {
              "name": "Company Name",
              "description": "Name of the company"
            },
            {
              "name": "Company Address",
              "description": "Address of the company"
            },
            {
              "name": "Invoice Number",
              "description": "The number of the invoice null or blank if doesnt exist"
            },
            {
              "name": "Document Type",
              "description": "={{ $('Google Drive1').item.json.mimeType }}"
            },
            {
              "name": "GSTIN",
              "description": "GST Identification Number null if doesnt exist"
            },
            {
              "name": "PAN",
              "description": "PAN: null if doesnt exist"
            },
            {
              "name": "Invoice Date",
              "type": "date",
              "description": "Invoice date null if doesnt exist"
            },
            {
              "name": "HSN/SAC ",
              "description": "HSN or SAC code null if doesnt exist"
            },
            {
              "name": "Taxes",
              "description": "Any applicable taxes written as {Tax name} - {Tax Price} with currency "
            },
            {
              "name": "Customer Name",
              "description": "Customer Name"
            },
            {
              "name": "Billing Address",
              "description": "Billing Address"
            },
            {
              "name": "Total Amount",
              "description": "Total Price (Incl.Tax) - "
            },
            {
              "name": "Payment Terms",
              "description": "Payment terms or type such as UPI, Cash/CoD, Debit Card, Credit Card"
            },
            {
              "name": "Currency",
              "description": "type of currency used INR here"
            },
            {
              "name": "Shipping Address",
              "description": "Shipping Address Billing and Shipping address can be same if the are not given separately"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        1940,
        1280
      ],
      "id": "79947157-048a-481d-b55f-37bda525f1b7",
      "name": "Information Extractor (for PDF)"
    },
    {
      "parameters": {
        "formTitle": "Drop an invoice",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Invoice",
              "fieldType": "file",
              "multipleFiles": false,
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        320,
        1440
      ],
      "id": "ff8fb85f-1693-4a45-a5f9-9dffa13807fd",
      "name": "On form submission",
      "webhookId": "eda9e8a4-0908-48b1-8027-805e7fea7126"
    }
  ],
  "pinData": {},
  "connections": {
    "Switch": {
      "main": [
        [
          {
            "node": "Upload pdf to Mistral",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Upload image to Mistral",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Signed URL": {
      "main": [
        [
          {
            "node": "Perform OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perform OCR": {
      "main": [
        [
          {
            "node": "Information Extractor (for PDF)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor (for PDF)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "for_validation": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Invoice_status_db": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "getting_output": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update exracted_information table1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload pdf to Mistral": {
      "main": [
        [
          {
            "node": "Get Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Signed URL1": {
      "main": [
        [
          {
            "node": "Perform OCR1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload image to Mistral": {
      "main": [
        [
          {
            "node": "Get Signed URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perform OCR1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor (for image)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Information Extractor (for image)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "updating mail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "for_validation1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Invoice_status_db1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "updating mail1": {
      "main": [
        [
          {
            "node": "getting_output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getting_output1": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update exracted_information table": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "updating received_from": {
      "main": [
        [
          {
            "node": "getting_output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor (for image)": {
      "main": [
        [
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor (for PDF)": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "90feb509-8864-4caa-957f-27a043879383",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "456cab7e0f9eca0d11b99a4b9b29948faa00a433587e57f9fa4bdd4b9fc0d77a"
  },
  "id": "mOJ8pvstXDn3H6gM",
  "tags": []
}